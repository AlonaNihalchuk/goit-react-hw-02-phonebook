{"version":3,"sources":["components/Form/Form.js","components/Contacts/Filter.js","components/Contacts/Contacts.js","App.js","index.js"],"names":["Form","state","name","number","handleNameChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","formReset","randomId","uuidv4","this","onChange","type","pattern","title","required","React","Component","Filter","StatisticsSection","contacts","filterValue","map","contact","id","App","filter","formSubmitHandler","newContact","find","alert","prevState","changeFilter","currentTarget","getVisibleContact","normalizedFilter","toLowerCase","includes","length","Contacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA8DeA,E,4MA1DbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAEVC,iBAAmB,SAAAC,GAEjB,EAAKC,SAAL,eAGGD,EAAEE,OAAOL,KAAOG,EAAEE,OAAOC,S,EAG9BC,aAAe,SAAAJ,GACbA,EAAEK,iBAGF,EAAKC,MAAMC,SAAS,EAAKX,OACzB,EAAKY,a,EAEPA,UAAY,WACV,EAAKP,SAAS,CACZJ,KAAM,GACNC,OAAQ,M,EAGZW,SAAWC,c,4CACX,WACE,OACE,uBAAMH,SAAUI,KAAKP,aAArB,UACE,gCACE,uBACEQ,SAAUD,KAAKZ,iBACfI,MAAOQ,KAAKf,MAAMC,KAClBgB,KAAK,OACLhB,KAAK,OACLiB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,MAGZ,uBACA,gCACE,uBACEJ,SAAUD,KAAKZ,iBACfI,MAAOQ,KAAKf,MAAME,OAClBe,KAAK,MACLhB,KAAK,SACLiB,QAAQ,yFACRC,MAAM,mjBACNC,UAAQ,MAGZ,uBACA,wBAAQH,KAAK,SAAb,yB,GAtDWI,IAAMC,WCaVC,EAdA,SAAC,GAAyB,IAAvBhB,EAAsB,EAAtBA,MAAOS,EAAe,EAAfA,SACvB,OACE,yDAEE,uBACEC,KAAK,OACLC,QAAQ,yHACRC,MAAM,kcACNZ,MAAOA,EACPS,SAAUA,QCaHQ,E,4JAnBb,WACE,MAA4CT,KAAKL,MAAzCe,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YAAaV,EAA/B,EAA+BA,SAC/B,OACE,oCACE,0CACA,cAAC,EAAD,CAAQT,MAAOmB,EAAaV,SAAUA,IAEtC,6BACGS,EAASE,KAAI,SAAAC,GAAO,OACnB,+BACE,8BAAIA,EAAQ3B,KAAZ,OACA,4BAAI2B,EAAQ1B,WAFL0B,EAAQC,gB,GAVGR,IAAMC,WCyDvBQ,E,4MAtDb9B,MAAQ,CACNyB,SAAU,GAMVM,OAAQ,I,EAGVC,kBAAoB,YAAuB,IAApB/B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAErB+B,EAAa,CACjBJ,GAAIf,cACJb,OACAC,UAEE,EAAKF,MAAMyB,SAASS,MAAK,SAAAN,GAAO,OAAIA,EAAQ3B,OAASgC,EAAWhC,QAClEkC,MAAM,GAAD,OAAIF,EAAWhC,KAAf,6BAGP,EAAKI,UAAS,SAAA+B,GAAS,MAAK,CAC1BX,SAAS,CAAD,eAAQQ,IAAR,mBAAyBG,EAAUX,gB,EAI/CY,aAAe,SAAAjC,GACb,EAAKC,SAAS,CAAE0B,OAAQ3B,EAAEkC,cAAc/B,S,EAE1CgC,kBAAoB,WAClB,IAAMC,EAAmB,EAAKxC,MAAM+B,OAAOU,cAC3C,OAAO,EAAKzC,MAAMyB,SAASM,QAAO,SAAAH,GAAO,OACvCA,EAAQ3B,KAAKwC,cAAcC,SAASF,O,4CAGxC,WACE,OACE,oCACE,2CACA,cAAC,EAAD,CAAM7B,SAAUI,KAAKiB,oBACW,IAA/BjB,KAAKf,MAAMyB,SAASkB,OACnB,sDAEA,cAACC,EAAD,CACEnB,SAAUV,KAAKwB,oBACfb,YAAaX,KAAKf,MAAM+B,OACxBf,SAAUD,KAAKsB,sB,GA/CThB,IAAMC,WCDxBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a585fe2d.chunk.js","sourcesContent":["// import PropTypes from 'prop-types'\nimport React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nclass Form extends React.Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  handleNameChange = e => {\n    // console.log(e.currentTarget.required);\n    this.setState({\n      // name: e.currentTarget.value,\n      // number: e.\n      [e.target.name]: e.target.value,\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    // console.log(this.state);\n\n    this.props.onSubmit(this.state);\n    this.formReset();\n  };\n  formReset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n  randomId = uuidv4();\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          <input\n            onChange={this.handleNameChange}\n            value={this.state.name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <br />\n        <label>\n          <input\n            onChange={this.handleNameChange}\n            value={this.state.number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифер и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <br />\n        <button type=\"submit\">Save</button>\n      </form>\n    );\n  }\n}\nexport default Form;\n","// import PropTypes from 'prop-types'\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label>\n      Find contact by name\n      <input\n        type=\"text\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </label>\n  );\n};\nexport default Filter;\n","// import PropTypes from 'prop-types'\nimport React from 'react';\nimport Filter from './Filter';\n\nclass StatisticsSection extends React.Component {\n  render() {\n    const { contacts, filterValue, onChange } = this.props;\n    return (\n      <section>\n        <h2>Contacts</h2>\n        <Filter value={filterValue} onChange={onChange} />\n\n        <ul>\n          {contacts.map(contact => (\n            <li key={contact.id}>\n              <p>{contact.name}:</p>\n              <p>{contact.number}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\nexport default StatisticsSection;\n","// import './App.css';\nimport React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\n\nclass App extends React.Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  formSubmitHandler = ({ name, number }) => {\n    // const { contacts } = this.state;\n    const newContact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    if (this.state.contacts.find(contact => contact.name === newContact.name)) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n    this.setState(prevState => ({\n      contacts: [{ ...newContact }, ...prevState.contacts],\n    }));\n    // console.log(this.state.contacts);\n  };\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n  getVisibleContact = () => {\n    const normalizedFilter = this.state.filter.toLowerCase();\n    return this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  render() {\n    return (\n      <section>\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.formSubmitHandler} />\n        {this.state.contacts.length === 0 ? (\n          <p>There are no contacts</p>\n        ) : (\n          <Contacts\n            contacts={this.getVisibleContact()}\n            filterValue={this.state.filter}\n            onChange={this.changeFilter}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}